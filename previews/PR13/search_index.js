var documenterSearchIndex = {"docs":
[{"location":"api_reference/#PositiveIntegrators.jl-API","page":"API reference","title":"PositiveIntegrators.jl API","text":"","category":"section"},{"location":"api_reference/","page":"API reference","title":"API reference","text":"CurrentModule = PositiveIntegrators","category":"page"},{"location":"api_reference/","page":"API reference","title":"API reference","text":"Modules = [PositiveIntegrators]","category":"page"},{"location":"api_reference/#PositiveIntegrators.ConservativePDSProblem","page":"API reference","title":"PositiveIntegrators.ConservativePDSProblem","text":"ConservativePDSProblem(P, u0, tspan, p = NullParameters();\n                        p_prototype = nothing, \n                        analytic=nothing)\n\nA structure describing a conservative system of ordinary differential equation in form of a production-destruction system (PDS). P denotes the production matrix. u0 is the vector of initial conditions and tspan the time span (t_initial, t_final) of the problem. The optional argument p can be used to pass additional parameters to the function P.\n\nThe function P can be given either in the out-of-place form with signature production_terms = P(u, p, t) or the in-place form P(production_terms, u, p, t).\n\nKeyword arguments:\n\np_prototype: If P is given in in-place form, p_prototype is used to store evaluations of P.   If p_prototype is not specified explicitly and P is in-place, then p_prototype will be internally set to zeros(eltype(u0), (length(u0), length(u0))).\nanalytic: The analytic solution of a PDS must be given in the form f(u0,p,t).   Specifying the analytic solution can be useful for plotting and convergence tests.\n\nReferences\n\nHans Burchard, Eric Deleersnijder, and Andreas Meister. \"A high-order conservative Patankar-type discretisation for stiff systems of production-destruction equations.\" Applied Numerical Mathematics 47.1 (2003): 1-30. DOI: 10.1016/S0168-9274(03)00101-6\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#PositiveIntegrators.MPE","page":"API reference","title":"PositiveIntegrators.MPE","text":"MPE()\n\nThe first-order modified Patankar-Euler algorithm for conservative production-destruction systems. This one-step, one-stage method is first-order accurate, unconditionally positivity-preserving, and linearly implicit.\n\nThe modified Patankar-Euler method requires the special structure of a PDSProblem or a ConservativePDSProblem.\n\nReferences\n\nHans Burchard, Eric Deleersnijder, and Andreas Meister. \"A high-order conservative Patankar-type discretisation for stiff systems of production-destruction equations.\" Applied Numerical Mathematics 47.1 (2003): 1-30. DOI: 10.1016/S0168-9274(03)00101-6\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#PositiveIntegrators.MPRK22","page":"API reference","title":"PositiveIntegrators.MPRK22","text":"MPRK22(α)\n\nThe second-order modified Patankar-Runge-Kutta algorithm for conservative production-destruction systems. This one-step, two-stage method is second-order accurate, unconditionally positivity-preserving, and linearly implicit. The parameter α is described by Kopecz and Meister (2018) and studied by Izgin, Kopecz and Meister (2022) as well as Torlo, Öffner and Ranocha (2022).\n\nThis modified Patankar-Runge-Kutta method requires the special structure of a PDSProblem or a ConservativePDSProblem.\n\nReferences\n\nHans Burchard, Eric Deleersnijder, and Andreas Meister. \"A high-order conservative Patankar-type discretisation for stiff systems of production-destruction equations.\" Applied Numerical Mathematics 47.1 (2003): 1-30. DOI: 10.1016/S0168-9274(03)00101-6\nStefan Kopecz and Andreas Meister. \"On order conditions for modified Patankar-Runge-Kutta schemes.\" Applied Numerical Mathematics 123 (2018): 159-179. DOI: 10.1016/j.apnum.2017.09.004\nThomas Izgin, Stefan Kopecz, and Andreas Meister. \"On Lyapunov stability of positive and conservative time integrators and application to second order modified Patankar-Runge-Kutta schemes.\" ESAIM: Mathematical Modelling and Numerical Analysis 56.3 (2022): 1053-1080. DOI: 10.1051/m2an/2022031\nDavide Torlo, Philipp Öffner, and Hendrik Ranocha. \"Issues with positivity-preserving Patankar-type schemes.\" Applied Numerical Mathematics 182 (2022): 117-147. DOI: 10.1016/j.apnum.2022.07.014\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#PositiveIntegrators.PDSProblem","page":"API reference","title":"PositiveIntegrators.PDSProblem","text":"PDSProblem(P, D, u0, tspan, p = NullParameters();\n                   p_prototype = nothing,\n                   d_prototype = nothing,\n                   analytic = nothing)\n\nA structure describing a system of ordinary differential equations in form of a production-destruction system (PDS). P denotes the production matrix. The diagonal of P contains production terms without destruction counterparts. D is the vector of destruction terms without production counterparts. u0 is the vector of initial conditions and tspan the time span (t_initial, t_final) of the problem. The optional argument p can be used to pass additional parameters to the functions P and D.\n\nThe functions P and D can be used either in the out-of-place form with signature production_terms = P(u, p, t) or the in-place form P(production_terms, u, p, t).\n\nKeyword arguments:\n\np_prototype: If P is given in in-place form, p_prototype is used to store evaluations of P.   If p_prototype is not specified explicitly and P is in-place, then p_prototype will be internally set to zeros(eltype(u0), (length(u0), length(u0))).\nd_prototype: If D is given in in-place form, d_prototype is used to store evaluations of D. If d_prototype is not specified explicitly and D is in-place, then d_prototype will be internally\n\nset to zeros(eltype(u0), (length(u0),)).\n\nanalytic: The analytic solution of a PDS must be given in the form f(u0,p,t).   Specifying the analytic solution can be useful for plotting and convergence tests.\n\nReferences\n\nHans Burchard, Eric Deleersnijder, and Andreas Meister. \"A high-order conservative Patankar-type discretisation for stiff systems of production-destruction equations.\" Applied Numerical Mathematics 47.1 (2003): 1-30. DOI: 10.1016/S0168-9274(03)00101-6\n\n\n\n\n\n","category":"type"},{"location":"license/","page":"License","title":"License","text":"EditURL = \"https://github.com/SKopecz/PositiveIntegrators.jl/blob/main/LICENSE.md\"","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023-present Stefan Kopecz, Hendrik Ranocha, and contributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"EditURL = \"https://github.com/SKopecz/PositiveIntegrators.jl/blob/main/CONTRIBUTING.md\"","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"ContributingPositiveIntegrators.jl is an open-source project and we are very happy to accept contributions from the community. Please feel free to open issues or submit patches (preferably as pull requests) any time. For planned larger contributions, it is often beneficial to get in contact first, for example via issues.PositiveIntegrators.jl and its contributions are licensed under the MIT license (see License). As a contributor, you certify that all your contributions are in conformance with the Developer Certificate of Origin (Version 1.1), which is reproduced below.Developer Certificate of Origin (Version 1.1)The following text was taken from https://developercertificate.org:Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"#PositiveIntegrators.jl","page":"Home","title":"PositiveIntegrators.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Julia library PositiveIntegrators.jl provides several time integration methods developed to preserve the positivity of numerical solutions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TODO: More introduction etc.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TODO: PositiveIntegrators.jl has to be registered - up to now, it is not!","category":"page"},{"location":"","page":"Home","title":"Home","text":"PositiveIntegrators.jl is a registered Julia package. Thus, you can install it from the Julia REPL via","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"PositiveIntegrators\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to update PositiveIntegrators.jl, you can use","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.update(\"PositiveIntegrators\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"As usual, if you want to update PositiveIntegrators.jl and all other packages in your current project, you can execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.update()","category":"page"},{"location":"#Basic-examples","page":"Home","title":"Basic examples","text":"","category":"section"},{"location":"#Modified-Patankar-Runge-Kutta-schemes","page":"Home","title":"Modified Patankar-Runge-Kutta schemes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modified Patankar-Runge-Kutta (MPRK) schemes are unconditionally positive and conservative time integration schemes for the solution of positive and conservative ODE systems. The formulation of these methods is based on the representation of the ODE system as a so-called production-destruction system (PDS).","category":"page"},{"location":"#Production-destruction-systems-(PDS)","page":"Home","title":"Production-destruction systems (PDS)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The formulation of MPRK schemes requires the ODE system to be represented as a production-destruction system (PDS). A PDS takes the general form","category":"page"},{"location":"","page":"Home","title":"Home","text":"    y_i(t) = sum_j=1^N bigl(p_ij(tboldsymbol y) - d_ij(tboldsymbol y)bigr)quad i=1dotsN","category":"page"},{"location":"","page":"Home","title":"Home","text":"where boldsymbol y=(y_1dotsy_n)^T is the vector of unknowns and the production terms p_ij(tboldsymbol y) as well as the destruction terms d_ij(tboldsymbol y) must be positive for all ij=1dotsN. The meaning behind p_ij and d_ij is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"p_ij with ine j represents the sum of all positive terms which  appear in equation i with a positive sign and in equation j with a negative sign.\nd_ij with ine j represents the sum of all positive terms which  appear in equation i with a negative sign and in equation j with a positive sign.\np_ii represents the sum of all positive terms  which appear in    equation i and don't have a negative counterpart.\nd_ii represents the sum of all negative terms which appear in    equation i and don't have a positive counterpart.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please note that the above naming convention leads to p_ij = d_ji for i j.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To illustrate the indexing, we consider the fictitious ODE system","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\ny_1 = y_1y_3^2 + 1-e^-y_3 - y_1 y_2 - y_1 \ny_2 = y_1y_2 + y_2 + y_1^2\ny_3=-y_1y_3^2-(1-e^-y_3)\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"Under the assumptions y_1y_2y_30, the above naming scheme results in","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\np_13(tboldsymbol y) = d_31(tboldsymbol y) = y_1y_3^2 + 1-e^-y_3\np_21(tboldsymbol y) = d_21(tboldsymbol y) = y_1 y_2\nd_11(tboldsymbol y) = y_1\np_22(tboldsymbol y) = y_2 + y_1^2\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the missing production and destruction terms are set to zero.","category":"page"},{"location":"","page":"Home","title":"Home","text":"One specific example of a PDS are the Lotka–Volterra equations","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = α x - β x yquad\ny = β x y - γ y","category":"page"},{"location":"","page":"Home","title":"Home","text":"with ","category":"page"},{"location":"","page":"Home","title":"Home","text":"p_11(xy) = α xquad\np_21(xy) = d_12(x y) = β x yquad\nd_22(xy) = γ y","category":"page"},{"location":"","page":"Home","title":"Home","text":"where we assume xy0 as well as alphabetagamma0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In terms of implementation, a PDS is completely described by the square matrix (p_ij)_ij=1dotsN and the vector (d_ii)_i=1dotsN. ","category":"page"},{"location":"#Conservative-production-destruction-systems","page":"Home","title":"Conservative production-destruction systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A PDS with ","category":"page"},{"location":"","page":"Home","title":"Home","text":"  p_ii(tboldsymbol y)=d_ii(tboldsymbol y)=0","category":"page"},{"location":"","page":"Home","title":"Home","text":"for i=1dotsN is called conservative. In this case we have","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracddtsum_i=1^N y_i=sum_i=1^N y_i = sum_mathclapij=1 i j^N bigl(p_ij(tboldsymbol y) - d_ij(tboldsymbol y)bigr)= sum_mathclapij=1 i j^N bigl(p_ij(tboldsymbol y) - p_ji(tboldsymbol y)bigr) = 0","category":"page"},{"location":"","page":"Home","title":"Home","text":"As a consequence the sum of state variables remains constant over time, i.e.","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_i=1^N y_i(t) = sum_i=1^N y_i(0) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"for all times t0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A specific example of a conservative PDS is the SIR model","category":"page"},{"location":"","page":"Home","title":"Home","text":"S = -fracβ S INquad I= fracβ S IN - γ Iquad R=γ I","category":"page"},{"location":"","page":"Home","title":"Home","text":"with","category":"page"},{"location":"","page":"Home","title":"Home","text":"p_21(SIR) = d_12(SIR) = fracβ S INquad p_32(SIR) = d_23(SIR) = γ I","category":"page"},{"location":"","page":"Home","title":"Home","text":"and SIR0, N=S+I+R and betagamma0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In terms of implementation, a conservative PDS is completely described by the square matrix (p_ij)_ij=1dotsN. There is no need for an additional vector to store destruction terms since we have d_ij = p_ji. ","category":"page"},{"location":"#Referencing","page":"Home","title":"Referencing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use PositiveIntegrators.jl for your research, please cite it using the bibtex entry","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{PositiveIntegrators.jl,\n  title={{PositiveIntegrators.jl}: {A} {J}ulia library of positivity-preserving\n         time integration methods},\n  author={Kopecz, Stefan and Ranocha, Hendrik and contributors},\n  year={2023},\n  doi={TODO},\n  url={https://github.com/SKopecz/PositiveIntegrators.jl}\n}","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT license (see License). Since it is an open-source project, we are very happy to accept contributions from the community. Please refer to the section Contributing for more details.","category":"page"}]
}
